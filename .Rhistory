print('Hello world')
print('hello world'')
print('hello world')
print('hello world')
emp_Id=c(1,2,3,4,5)
emp.Id=c(2,3,4,6,7)
marks=c(10,20,30,40,50)
Name=c("Rama","Krishna","Naresh","Raja","Mani")
df1 = data.frame(emp_Id, marks)
df2 = data.frame(emp.Id, Name)
df1
df2
df3 = merge(df1,df2, by.x = 'emp_Id', by.y='emp.Id')
df3
df4 = merge(df1,df2,by.x = 'emp_Id', by.y='emp.Id', all.x = 'T' )
df4
df5 = merge(df1, df2, by.x = 'emp_Id', by.y='emp.Id', all.y = 'T')
df5
df6 = merge(df1,df2, by.x='emp_Id', by.y = 'emp.Id', all = 'T')
df6
print(ls())
rm(list = ls())
q = 0
print(ls())
vector1 = c(1,2,3,4)
vector2 = c(5,4,7,8)
Div = vector1%/%vector2
Div
rem = vector1 %% vector2
rem
search = vector1%in%vector2
search
M = matrix(c(1,2,3,4,5,6), nrow = 2, ncol = 3, byrow = 'T')
M
N = matrix(c(7,8,9,1,2,3), nrow = 3, ncol = 2, byrow = 'T')
N
P = M%*%N
P
z = 'Hello..'
x = 'How are'
c = 'you?'
print (paste(z,x,c, sep = '-' ))
print(paste(z,x,c, sep = '#####'))
toupper(x)
tolower(x)
length(x)
nchar(x)
print("Saurabh\nGanesh\nTayde\n")
cat("Mani\nRama\nNaresh\n")
result <- substring("Extracted", 5, 7)
result
sample = substring('How would I know this?', 4,19)
sample
setwd(D:\Saurabh T\R\RCodesMail\CSV)
getwd()
fitness = read.csv(Fitness)
fitness = read.csv('Fitness')
fitness = read.csv('Fitness.csv')
setwd('D:/Saurabh T/R/Logistic Regression Practice')
getwd()
bc = read.csv('breast-cancer-wisconsin_updated.csv')
summary(bc)
str(bc)
?ord.factor
?factor
cl.thickness = as.factor(cl.thickness)
cl.thickness = as.factor(bc$cl.thickness)
str(bc)
cl.thickness = as.factor(bc$cl.thickness)
bc$cl.thickness = as.factor(bc$cl.thickness)
str(bc)
bc$Class = as.factor(bc$Class)
str(bc)
bc$Cl.thickness = as.ordered(bc$Cl.thickness)
str(bc)
bc$Cell.size = as.ordered(bc$Cell.size)
bc$Class = as.factor(bc$Class)
bc$Cl.thickness = as.ordered(bc$Cl.thickness)
bc$Cell.size = as.ordered(bc$Cell.size)
bc$Cell.shape = as.ordered(bc$Cell.shape)
bc$Marg.adhesion = as.ordered(bc$Marg.adhesion)
bc$Epith.c.size = as.ordered(bc$Epith.c.size)
bc$Bl.cromatin = as.ordered(bc$Bl.cromatin)
bc$Normal.nucleoli = as.ordered(bc$Normal.nucleoli)
bc$Mitoses = as.ordered(bc$Mitoses)
str(bc)
bc$Bl.cromatin = as.factor(bc$Bl.cromatin)
bc$Normal.nucleoli = as.factor(bc$Normal.nucleoli)
bc$Mitoses = as.factor(bc$Mitoses)
str(bc)
bc = read.csv('breast-cancer-wisconsin_updated.csv')
bc$Cl.thickness = as.ordered(bc$Cl.thickness)
bc$Cell.size = as.ordered(bc$Cell.size)
bc$Cell.shape = as.ordered(bc$Cell.shape)
bc$Marg.adhesion = as.ordered(bc$Marg.adhesion)
bc$Epith.c.size = as.ordered(bc$Epith.c.size)
bc$Bl.cromatin = as.factor(bc$Bl.cromatin)
bc$Normal.nucleoli = as.factor(bc$Normal.nucleoli)
bc$Mitoses = as.factor(bc$Mitoses)
bc$Class = as.factor(bc$Class)
str(bc)
bc = read.csv('breast-cancer-wisconsin_updated.csv')
str(bc)
bc$Bl.cromatin = is.factor(bc$Bl.cromatin)
bc$Normal.nucleoli = is.factor(bc$Normal.nucleoli)
bc$Mitoses = is.factor(bc$Mitoses)
bc$Class = is.factor(bc$Class)
str(bc)
bc$Id = as.char(bc$Id)
bc$Cl.thickness = as.ordered(bc$Cl.thickness)
bc$Cell.size = as.ordered(bc$Cell.size)
bc$Cell.shape = as.ordered(bc$Cell.shape)
bc$Marg.adhesion = as.ordered(bc$Marg.adhesion)
bc$Epith.c.size = as.ordered(bc$Epith.c.size)
bc$Bl.cromatin = as.factor(bc$Bl.cromatin)
bc$Normal.nucleoli = as.factor(bc$Normal.nucleoli)
bc$Mitoses = as.factor(bc$Mitoses)
bc$Class = as.factor(bc$Class)
str(bc)
bc$Id = as.char(bc$Id)
bc$Cl.thickness = as.ordered(bc$Cl.thickness)
bc$Cell.size = as.ordered(bc$Cell.size)
bc$Cell.shape = as.ordered(bc$Cell.shape)
bc$Marg.adhesion = as.ordered(bc$Marg.adhesion)
bc$Epith.c.size = as.ordered(bc$Epith.c.size)
bc$Bl.cromatin = as.factor(bc$Bl.cromatin)
bc$Normal.nucleoli = as.factor(bc$Normal.nucleoli)
bc$Mitoses = as.factor(bc$Mitoses)
bc$Class = as.factor(bc$Class)
str(bc)
bc = read.csv('breast-cancer-wisconsin_updated.csv')
bc$Id = as.char(bc$Id)
bc$Cl.thickness = as.ordered(bc$Cl.thickness)
bc$Cell.size = as.ordered(bc$Cell.size)
bc$Cell.shape = as.ordered(bc$Cell.shape)
bc$Marg.adhesion = as.ordered(bc$Marg.adhesion)
bc$Epith.c.size = as.ordered(bc$Epith.c.size)
bc$Bl.cromatin = as.factor(bc$Bl.cromatin)
bc$Normal.nucleoli = as.factor(bc$Normal.nucleoli)
bc$Mitoses = as.factor(bc$Mitoses)
bc$Class = as.factor(bc$Class)
str(bc)
bc$Id = as.character(bc$Id)
str(bc)
head(bc)
unique(bc$Cell.shape)
bc = read.csv('breast-cancer-wisconsin_updated.csv')
summary(bc)
str(bc)
bc = read.csv('breast-cancer-wisconsin_updated.csv')
table(bc$Class)
bc = read.txt('breast-cancer-wisconsin_updated.csv')
library(caTools)
install.packages('caTools')
library(caTools)
library(caTools)
set.seed(100)
?sample.split
?createDataPartition
?createDataPartition
library(caret)
install.packages('caret')
?createDataPartition
library(caret)
?createDataPartition
trainingRowIndex = createDataPartition(bc$Class, p=0.7)
trainData = bc[trainingRowIndex, ]
testData = bc[-trainingRowIndex, ]
trainingRowIndex = createDataPartition(bc$Class, p=0.7, list = F)
trainData = bc[trainingRowIndex, ]
testData = bc[-trainingRowIndex, ]
dim(trainData)
dim(testData)
table(trainData$Class)
dim(testData)
table(testData$Class)
testData = bc[-trainingRowIndex, ]
getwd()
getwd()
getwd()
setwd('D:/Saurabh T/R/Logistic Regression Practice/Quality')
setwd('G:/DSP/LogisticRegressionPractice/titanic/Logistic Regression Practice/Logistic Regression Practice/Quality')
getwd()
quality = read.csv('quality.csv')
head(quality)
str(quality)
dim(quality)
table(quality$PoorCare)
library(caTools)
set.seed(88)
split = sample.split(quality$PoorCare, SplitRatio = 0.8)
split
trainData = subset(quality, split == TRUE)
testData = subset(quality, split == F)
table(trainData$PoorCare)
table(testData$PoorCare)
nrow(trainData)
nrow(testData)
TrainModel1 = glm(PoorCare ~. , family = binomial, data = trainData)
summary(TrainModel1)
library(car)
stepAIC(TrainModel1, direction = 'both')
library(MASS)
stepAIC(TrainModel1, direction = 'both')
TrainModel2 = glm(formula = PoorCare ~ OfficeVisits +
AcuteDrugGapSmall, family = binomial, data = trainData)
summary(TrainModel2)
dim(TrainModel2)
plot(TrainModel2)
vif(QualityModel2)
vif(TrainModel2)
predictTrain = predict(TrainModel2, type = 'response')
predictTrain
summary(predictTrain)
summary(predictTrain)
predictTrain
summary(TrainModel2)
tapply(predictTrain, trainData$PoorCare, mean)  #Sort by poorcare and then took the mean
table(trainData$PoorCare, predictTrain > 0.5)
install.packages('ROCR')
library(ROCR)
ROCpred = prediction(predictTrain, trainData$PoorCare)
ROCpred
ROCperf = performance(ROCpred, 'tpr', 'fpr')
plot(ROCperf)
plot(ROCperf, colorize = T)
plot(ROCperf, colorize=TRUE, print.cutoffs.at=seq(0,1,by=0.1))
plot(ROCperf, colorize=TRUE, print.cutoffs.at=seq(0,1,by=0.1), text.adj=c(-0.2,1.7))
plot(ROCperf, colorize=TRUE, print.cutoffs.at=seq(0,1,by=0.1), text.adj=c(-0.05,1.7))
plot(ROCperf, colorize=TRUE, print.cutoffs.at=seq(0,1,by=0.1), text.adj=c(-0.2,1.7))
predicttest = predict(TrainModel2, type = 'response', newdata = testData)
predicttest
table(testData$PoorCare, predicttest>= 0.4)
table(testData$PoorCare, predicttest>= 0.3)
table(testData$PoorCare, predicttest>= 0.4)
